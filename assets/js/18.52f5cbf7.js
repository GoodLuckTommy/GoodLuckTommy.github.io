(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{405:function(t,e,n){"use strict";n.r(e);var i=n(10),a=Object(i.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"java-is-still-good-for-coding-interview"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java-is-still-good-for-coding-interview"}},[t._v("#")]),t._v(" Java is still good for coding interview")]),t._v(" "),n("p",[t._v("Many people think python is the best choice for coding interviews. True. But Java is good as python. Here is basic java types to remind. It's referenced the book '"),n("a",{attrs:{href:"https://www.amazon.com/Elements-Programming-Interviews-Java-Insiders/dp/1517671272",target:"_blank",rel:"noopener noreferrer"}},[t._v("Elements of Programming Interviews in Java"),n("OutboundLink")],1),t._v("'")]),t._v(" "),n("h2",{attrs:{id:"back-to-the-basic"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#back-to-the-basic"}},[t._v("#")]),t._v(" Back to the basic")]),t._v(" "),n("p",[t._v("Java has no unsigned integers, and the integer width is compiler and machine-dependent in C.")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",{staticStyle:{"text-align":"center"}},[t._v("Data structure")]),t._v(" "),n("th",{staticStyle:{"text-align":"left"}},[n("center",[t._v("Key Points")])],1)])]),t._v(" "),n("tbody",[n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("Primitive types")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("Know how int, char, double, etc. are represented in memory and the primitive operations on them.")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("Arrays")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("Fast access for element at an index, slow lookups(unless sorted) and insertions. Be comfortable with notions of iteration, resizing, partitioning, merging, etc.")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("Strings")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("Know how strings are represented in memory. Unserstand basic operators such as comparison, copying, matching, joining, splitting, etc.")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("Lists")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("Understand trade-offs with respect to arrays. Be comfortable with iteration, insertion, and deletion within singly and doubly linked lists. Know how to implement a list with dynamic allocation, and with arrays.")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("Stacks and queues")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("Recongnize where last-in first-out(stack) and first-in first-out(queue) sementics are applicable. Know array and linked list implementations.")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("Binary trees")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("Use for representing hierarchical data. Know about depth, height, leaves, search path, traversal sequences, successor/predecessor operations.")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("Heaps")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("O(1) lookup find-max,"),n("br"),t._v("O(log"),n("sub",[t._v("n")]),t._v(") insertion,"),n("br"),t._v("O(lon"),n("sub",[t._v("n")]),t._v(") deletion of max."),n("br"),t._v("Node and array representations. Min-heap variant.")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("Hash tables")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("O(1) insertions, deletions and lookups."),n("br"),t._v("Key disadvantages: not suitable for order-related queries; need for resizing; poor worse-case performance. Understand implementation using array of buckets and collision chains. Know hash functions for integers, strings, objects")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("Binary search trees")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("O(log"),n("sub",[t._v("n")]),t._v(") insertions, deletions, lookups, find-min, find-max, successor, predecessor when tree is height-balanced"),n("br"),t._v("Unserstand node fields, pointer implementation. Be familiar with notion of balance, and operations maintaining balance.")])])])]),t._v(" "),n("p",{attrs:{align:"center"}},[n("img",{attrs:{width:"100%",height:"100%",src:"/img/202204/heap.png"}})])])}),[],!1,null,null,null);e.default=a.exports}}]);